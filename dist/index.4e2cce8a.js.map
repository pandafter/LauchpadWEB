{"mappings":"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","sources":["<anon>","lauchpad.js"],"sourcesContent":["class LaunchpadEmulator {\n    constructor(){\n        this.midiInput = null;\n        this.midiOutput = null;\n        this.pads = new Map();\n        this.selectedPad = null;\n        this.audioContext = new (window.AudioContext || window.webkitAudioContext)();\n        this.activeAudioSources = new Map();\n        this.keyToPadMap = {\n            q: \"0-0\",\n            w: \"0-1\",\n            e: \"0-2\",\n            r: \"0-3\",\n            t: \"0-4\",\n            y: \"0-5\",\n            u: \"0-6\",\n            i: \"0-7\",\n            a: \"1-0\",\n            s: \"1-1\",\n            d: \"1-2\",\n            f: \"1-3\",\n            g: \"1-4\",\n            h: \"1-5\",\n            j: \"1-6\",\n            k: \"1-7\",\n            z: \"2-0\",\n            x: \"2-1\",\n            c: \"2-2\",\n            v: \"2-3\",\n            b: \"2-4\",\n            n: \"2-5\",\n            m: \"2-6\",\n            \",\": \"2-7\",\n            1: \"7-5\",\n            2: \"7-6\",\n            3: \"7-7\",\n            4: \"6-5\",\n            5: \"6-6\",\n            6: \"6-7\",\n            7: \"5-5\",\n            8: \"5-6\",\n            9: \"5-7\"\n        };\n        this.init();\n    }\n    init() {\n        this.createGrid();\n        this.setupEventListeners();\n        this.setupMIDI();\n        this.setupContextMenu();\n    }\n    createGrid() {\n        const grid = document.getElementById(\"launchpadGrid\");\n        for(let row = 0; row < 8; row++)for(let col = 0; col < 8; col++){\n            const pad = document.createElement(\"div\");\n            pad.className = \"pad\";\n            pad.id = `${row}-${col}`; // Asignar ID basado en la posición\n            pad.style.backgroundColor = \"#333\";\n            const statusIcon = document.createElement(\"div\");\n            statusIcon.className = \"pad-status\";\n            pad.appendChild(statusIcon);\n            const padId = `${row}-${col}`;\n            this.pads.set(padId, {\n                element: pad,\n                color: \"#333\",\n                audioBuffer: null,\n                isPlaying: false,\n                statusIcon,\n                imageBuffer: null,\n                hasImage: false\n            });\n            pad.addEventListener(\"click\", ()=>this.handlePadClick(padId));\n            pad.addEventListener(\"contextmenu\", (e)=>this.showContextMenu(e, padId));\n            grid.appendChild(pad);\n        }\n    }\n    setupContextMenu() {\n        document.addEventListener(\"contextmenu\", (e)=>e.preventDefault());\n        document.addEventListener(\"click\", ()=>{\n            const menu = document.querySelector(\".context-menu\");\n            if (menu) menu.remove();\n        });\n    }\n    showContextMenu(event, padId) {\n        event.preventDefault();\n        const existingMenu = document.querySelector(\".context-menu\");\n        if (existingMenu) existingMenu.remove();\n        const menu = document.createElement(\"div\");\n        menu.className = \"context-menu\";\n        // Crear el menú con sus items primero\n        const pad = this.pads.get(padId);\n        const items = [\n            {\n                text: \"Cargar Audio\",\n                action: ()=>this.loadAudioFile(padId)\n            },\n            {\n                text: \"Cambiar Color\",\n                action: ()=>this.showColorPicker(padId)\n            },\n            {\n                text: \"Cambiar Imagen\",\n                action: ()=>this.loadImageFile(padId)\n            }\n        ];\n        // Si hay un sonido cargado, mostramos su información\n        if (pad.soundInfo) items.unshift({\n            text: `Sonido: ${pad.soundInfo.name}`,\n            action: ()=>{},\n            className: \"info\"\n        });\n        // Agregar opción de eliminar audio solo si hay un audio cargado\n        if (pad.audioBuffer) items.push({\n            text: \"Eliminar Audio\",\n            action: ()=>this.removeAudio(padId),\n            className: \"danger text-danger\"\n        });\n        // Agregar opción de eliminar imagen si hay una imagen\n        if (pad.hasImage) items.push({\n            text: \"Eliminar Imagen\",\n            action: ()=>this.removeImage(padId),\n            className: \"danger text-danger\"\n        });\n        items.forEach((item)=>{\n            const menuItem = document.createElement(\"div\");\n            menuItem.className = \"context-menu-item\" + (item.className ? \" \" + item.className : \"\");\n            menuItem.textContent = item.text;\n            menuItem.onclick = ()=>{\n                item.action();\n                menu.remove();\n            };\n            menu.appendChild(menuItem);\n        });\n        // Agregar el menú al DOM temporalmente para obtener sus dimensiones\n        document.body.appendChild(menu);\n        // Obtener las dimensiones del menú y la ventana\n        const menuRect = menu.getBoundingClientRect();\n        const windowWidth = window.innerWidth;\n        const windowHeight = window.innerHeight;\n        // Calcular la posición óptima\n        let xPos = event.clientX;\n        let yPos = event.clientY;\n        // Ajustar horizontalmente si el menú se sale de la ventana\n        if (xPos + menuRect.width > windowWidth) xPos = windowWidth - menuRect.width - 10; // 10px de margen\n        // Ajustar verticalmente si el menú se sale de la ventana\n        if (yPos + menuRect.height > windowHeight) yPos = windowHeight - menuRect.height - 10; // 10px de margen\n        // Asegurar que el menú no aparezca fuera de la pantalla por la izquierda o arriba\n        xPos = Math.max(10, xPos);\n        yPos = Math.max(10, yPos);\n        // Aplicar la posición final\n        menu.style.left = `${xPos}px`;\n        menu.style.top = `${yPos}px`;\n    }\n    showColorPicker(padId) {\n        const overlay = document.createElement(\"div\");\n        overlay.className = \"modal-overlay\";\n        const modal = document.createElement(\"div\");\n        modal.className = \"color-picker-modal\";\n        const colorPicker = document.createElement(\"input\");\n        colorPicker.type = \"color\";\n        colorPicker.value = this.pads.get(padId).color;\n        const applyButton = document.createElement(\"button\");\n        const resetButton = document.createElement(\"button\");\n        applyButton.textContent = \"Aplicar\";\n        applyButton.onclick = ()=>{\n            this.setPadColor(padId, colorPicker.value);\n            overlay.remove();\n        };\n        resetButton.textContent = \"Reiniciar\";\n        resetButton.onclick = ()=>{\n            this.setPadColor(padId, \"#333\");\n            overlay.remove();\n        };\n        modal.appendChild(colorPicker);\n        modal.appendChild(applyButton);\n        modal.appendChild(resetButton);\n        overlay.appendChild(modal);\n        document.body.appendChild(overlay);\n    }\n    async setupMIDI() {\n        try {\n            if (navigator.requestMIDIAccess) {\n                const midiAccess = await navigator.requestMIDIAccess();\n                document.getElementById(\"connectMIDI\").addEventListener(\"click\", ()=>{\n                    this.connectToLaunchpad(midiAccess);\n                });\n            }\n        } catch (error) {\n            console.error(\"Error al acceder a MIDI:\", error);\n            document.getElementById(\"midiStatus\").textContent = \"Error: MIDI no soportado\";\n        }\n    }\n    connectToLaunchpad(midiAccess) {\n        for (const input of midiAccess.inputs.values())if (input.name.includes(\"Launchpad\")) {\n            this.midiInput = input;\n            this.midiInput.onmidimessage = (message)=>this.handleMIDIMessage(message);\n            document.getElementById(\"midiStatus\").textContent = \"Estado MIDI: Conectado a \" + input.name;\n            break;\n        }\n        for (const output of midiAccess.outputs.values())if (output.name.includes(\"Launchpad\")) {\n            this.midiOutput = output;\n            break;\n        }\n    }\n    handleMIDIMessage(message) {\n        const [status, note, velocity] = message.data;\n        if (status === 144) {\n            // Note On\n            const row = Math.floor(note / 16);\n            const col = note % 16;\n            const padId = `${row}-${col}`;\n            if (this.pads.has(padId)) this.triggerPad(padId);\n        }\n    }\n    setupEventListeners() {\n        document.addEventListener(\"keydown\", (e)=>{\n            if (e.code === \"Space\") {\n                e.preventDefault();\n                this.stopAllAudio();\n            }\n            const padId = this.keyToPadMap[e.key.toLocaleLowerCase()];\n            if (padId) {\n                e.preventDefault();\n                this.triggerPad(padId);\n            }\n        });\n    }\n    handlePadClick(padId) {\n        this.selectedPad = padId;\n        this.triggerPad(padId);\n    }\n    triggerPad(padId) {\n        const pad = this.pads.get(padId);\n        if (pad.audioBuffer) {\n            if (pad.isPlaying) this.stopAudio(padId);\n            else this.playAudio(padId);\n        }\n        const originalColor = pad.color;\n        pad.element.style.backgroundColor = \"#fff\";\n        setTimeout(()=>{\n            pad.element.style.backgroundColor = originalColor;\n        }, 100);\n    }\n    removeAudio(padId) {\n        const pad = this.pads.get(padId);\n        // Detener el audio si está sonando\n        if (pad.isPlaying) this.stopAudio(padId);\n        // Limpiar el buffer y resetear el estado\n        pad.audioBuffer = null;\n        pad.element.style.border = \"2px solid #333\";\n        pad.statusIcon.textContent = \"\";\n    }\n    removeImage(padId) {\n        const padElement = document.getElementById(padId);\n        const pad = this.pads.get(padId);\n        // Remove the image element\n        const imageElement = padElement.querySelector(\"img.pad-image\");\n        if (imageElement) {\n            // Revoke the object URL to free up memory\n            if (pad.imageBuffer) URL.revokeObjectURL(pad.imageBuffer);\n            imageElement.remove();\n            // Reset pad state\n            pad.hasImage = false;\n            pad.imageBuffer = null;\n        }\n    }\n    async loadAudioFile(padId) {\n        const input = document.createElement(\"input\");\n        input.type = \"file\";\n        input.accept = \"audio/*\";\n        input.onchange = async (e)=>{\n            const file = e.target.files[0];\n            const arrayBuffer = await file.arrayBuffer();\n            const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\n            const pad = this.pads.get(padId);\n            pad.audioBuffer = audioBuffer;\n            pad.element.style.border = \"2px solid #4CAF50\";\n        };\n        input.click();\n    }\n    async loadImageFile(padId) {\n        const input = document.createElement(\"input\");\n        input.type = \"file\";\n        input.accept = \"image/*\";\n        input.onchange = async (event)=>{\n            const file = event.target.files[0];\n            if (file) {\n                const imageUrl = URL.createObjectURL(file);\n                const padElement = document.getElementById(padId);\n                const pad = this.pads.get(padId);\n                if (padElement) {\n                    let imageElement = padElement.querySelector(\"img\");\n                    if (!imageElement) {\n                        imageElement = document.createElement(\"img\");\n                        padElement.appendChild(imageElement);\n                    }\n                    imageElement.src = imageUrl;\n                    imageElement.style.width = \"100%\";\n                    imageElement.style.height = \"100%\";\n                    imageElement.classList.add(\"pad-image\"); // Add class for easier selection\n                    // Update pad state\n                    pad.hasImage = true;\n                    pad.imageBuffer = imageUrl;\n                }\n            }\n        };\n        input.click();\n    }\n    setPadColor(padId, color) {\n        const pad = this.pads.get(padId);\n        pad.color = color;\n        pad.element.style.backgroundColor = color;\n        if (this.midiOutput) {\n            const [row, col] = padId.split(\"-\").map(Number);\n            const note = row * 16 + col;\n            const [r, g, b] = this.hexToRgb(color);\n            const velocity = Math.floor((r + g + b) / 3 * 127 / 255);\n            this.midiOutput.send([\n                144,\n                note,\n                velocity\n            ]);\n        }\n    }\n    hexToRgb(hex) {\n        const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n        return result ? [\n            parseInt(result[1], 16),\n            parseInt(result[2], 16),\n            parseInt(result[3], 16)\n        ] : [\n            0,\n            0,\n            0\n        ];\n    }\n    playAudio(padId) {\n        const pad = this.pads.get(padId);\n        if (pad.isPlaying) this.stopAudio(padId);\n        const source = this.audioContext.createBufferSource();\n        source.buffer = pad.audioBuffer;\n        source.connect(this.audioContext.destination);\n        source.start();\n        pad.isPlaying = true;\n        pad.statusIcon.textContent = \"\\u23F8\";\n        source.onended = ()=>{\n            pad.isPlaying = false;\n            pad.statusIcon.textContent = \"\";\n            this.activeAudioSources.delete(padId);\n        };\n        this.activeAudioSources.set(padId, source);\n    }\n    stopAudio(padId) {\n        const source = this.activeAudioSources.get(padId);\n        const pad = this.pads.get(padId);\n        if (source) {\n            source.stop();\n            this.activeAudioSources.delete(padId);\n        }\n        pad.isPlaying = false;\n        pad.statusIcon.textContent = \"\\u23F8\";\n    }\n    stopAllAudio() {\n        for (const [padId] of this.activeAudioSources)this.stopAudio(padId);\n    }\n}\nwindow.addEventListener(\"DOMContentLoaded\", ()=>{\n    new LaunchpadEmulator();\n});\n// Animación en espiral\nfunction spiralAnimation() {\n    const gridSize = 8; // Tamaño de la cuadrícula\n    const animationColor = \"#4caf50\"; // Color para la animación\n    const originalColor = \"#333\"; // Color original\n    const delay = 100; // Tiempo en ms entre cambios de cada pad\n    let spiralOrder = [];\n    // Calcular el orden en espiral de los pads\n    let left = 0, right = gridSize - 1, top = 0, bottom = gridSize - 1;\n    while(left <= right && top <= bottom){\n        for(let i = left; i <= right; i++)spiralOrder.push(`${top}-${i}`);\n        top++;\n        for(let i = top; i <= bottom; i++)spiralOrder.push(`${i}-${right}`);\n        right--;\n        for(let i = right; i >= left; i--)spiralOrder.push(`${bottom}-${i}`);\n        bottom--;\n        for(let i = bottom; i >= top; i--)spiralOrder.push(`${i}-${left}`);\n        left++;\n    }\n    // Aplicar la animación en espiral\n    spiralOrder.forEach((padId, index)=>{\n        setTimeout(()=>{\n            const pad = document.getElementById(padId);\n            if (pad) {\n                pad.style.backgroundColor = animationColor;\n                setTimeout(()=>{\n                    pad.style.backgroundColor = originalColor;\n                }, delay * 2); // Apagar después de un tiempo\n            }\n        }, index * delay);\n    });\n}\n// Llamar a la animación al cargar la página\nwindow.onload = function() {\n    spiralAnimation();\n};\n\n//# sourceMappingURL=index.4e2cce8a.js.map\n","class LaunchpadEmulator {\r\n  constructor() {\r\n    this.midiInput = null;\r\n    this.midiOutput = null;\r\n    this.pads = new Map();\r\n    this.selectedPad = null;\r\n    this.audioContext = new (window.AudioContext ||\r\n      window.webkitAudioContext)();\r\n    this.activeAudioSources = new Map();\r\n\r\n    this.keyToPadMap = {\r\n      q: \"0-0\",\r\n      w: \"0-1\",\r\n      e: \"0-2\",\r\n      r: \"0-3\",\r\n      t: \"0-4\",\r\n      y: \"0-5\",\r\n      u: \"0-6\",\r\n      i: \"0-7\",\r\n\r\n      a: \"1-0\",\r\n      s: \"1-1\",\r\n      d: \"1-2\",\r\n      f: \"1-3\",\r\n      g: \"1-4\",\r\n      h: \"1-5\",\r\n      j: \"1-6\",\r\n      k: \"1-7\",\r\n\r\n      z: \"2-0\",\r\n      x: \"2-1\",\r\n      c: \"2-2\",\r\n      v: \"2-3\",\r\n      b: \"2-4\",\r\n      n: \"2-5\",\r\n      m: \"2-6\",\r\n      \",\": \"2-7\",\r\n\r\n      1: \"7-5\",\r\n      2: \"7-6\",\r\n      3: \"7-7\",\r\n      4: \"6-5\",\r\n      5: \"6-6\",\r\n      6: \"6-7\",\r\n      7: \"5-5\",\r\n      8: \"5-6\",\r\n      9: \"5-7\",\r\n    };\r\n\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.createGrid();\r\n    this.setupEventListeners();\r\n    this.setupMIDI();\r\n    this.setupContextMenu();\r\n  }\r\n\r\n  createGrid() {\r\n    const grid = document.getElementById(\"launchpadGrid\");\r\n\r\n    for (let row = 0; row < 8; row++) {\r\n      for (let col = 0; col < 8; col++) {\r\n        const pad = document.createElement(\"div\");\r\n        pad.className = \"pad\";\r\n        pad.id = `${row}-${col}`; // Asignar ID basado en la posición\r\n        pad.style.backgroundColor = \"#333\";\r\n\r\n        const statusIcon = document.createElement(\"div\");\r\n        statusIcon.className = \"pad-status\";\r\n        pad.appendChild(statusIcon);\r\n\r\n        const padId = `${row}-${col}`;\r\n        this.pads.set(padId, {\r\n          element: pad,\r\n          color: \"#333\",\r\n          audioBuffer: null,\r\n          isPlaying: false,\r\n          statusIcon,\r\n          imageBuffer: null,\r\n          hasImage: false,\r\n        });\r\n\r\n        pad.addEventListener(\"click\", () => this.handlePadClick(padId));\r\n        pad.addEventListener(\"contextmenu\", (e) =>\r\n          this.showContextMenu(e, padId)\r\n        );\r\n        grid.appendChild(pad);\r\n      }\r\n    }\r\n  }\r\n\r\n  setupContextMenu() {\r\n    document.addEventListener(\"contextmenu\", (e) => e.preventDefault());\r\n\r\n    document.addEventListener(\"click\", () => {\r\n      const menu = document.querySelector(\".context-menu\");\r\n      if (menu) menu.remove();\r\n    });\r\n  }\r\n\r\n  showContextMenu(event, padId) {\r\n    event.preventDefault();\r\n\r\n    const existingMenu = document.querySelector(\".context-menu\");\r\n    if (existingMenu) existingMenu.remove();\r\n\r\n    const menu = document.createElement(\"div\");\r\n    menu.className = \"context-menu\";\r\n\r\n    // Crear el menú con sus items primero\r\n    const pad = this.pads.get(padId);\r\n    const items = [\r\n      { text: \"Cargar Audio\", action: () => this.loadAudioFile(padId) },\r\n      { text: \"Cambiar Color\", action: () => this.showColorPicker(padId) },\r\n      { text: \"Cambiar Imagen\", action: () => this.loadImageFile(padId) },\r\n    ];\r\n\r\n    // Si hay un sonido cargado, mostramos su información\r\n    if (pad.soundInfo) {\r\n      items.unshift({\r\n        text: `Sonido: ${pad.soundInfo.name}`,\r\n        action: () => {},\r\n        className: \"info\",\r\n      });\r\n    }\r\n\r\n    // Agregar opción de eliminar audio solo si hay un audio cargado\r\n    if (pad.audioBuffer) {\r\n      items.push({\r\n        text: \"Eliminar Audio\",\r\n        action: () => this.removeAudio(padId),\r\n        className: \"danger text-danger\",\r\n      });\r\n    }\r\n\r\n    // Agregar opción de eliminar imagen si hay una imagen\r\n    if (pad.hasImage) {\r\n      items.push({\r\n        text: \"Eliminar Imagen\",\r\n        action: () => this.removeImage(padId),\r\n        className: \"danger text-danger\",\r\n      });\r\n    }\r\n\r\n    items.forEach((item) => {\r\n      const menuItem = document.createElement(\"div\");\r\n      menuItem.className =\r\n        \"context-menu-item\" + (item.className ? \" \" + item.className : \"\");\r\n      menuItem.textContent = item.text;\r\n      menuItem.onclick = () => {\r\n        item.action();\r\n        menu.remove();\r\n      };\r\n      menu.appendChild(menuItem);\r\n    });\r\n\r\n    // Agregar el menú al DOM temporalmente para obtener sus dimensiones\r\n    document.body.appendChild(menu);\r\n\r\n    // Obtener las dimensiones del menú y la ventana\r\n    const menuRect = menu.getBoundingClientRect();\r\n    const windowWidth = window.innerWidth;\r\n    const windowHeight = window.innerHeight;\r\n\r\n    // Calcular la posición óptima\r\n    let xPos = event.clientX;\r\n    let yPos = event.clientY;\r\n\r\n    // Ajustar horizontalmente si el menú se sale de la ventana\r\n    if (xPos + menuRect.width > windowWidth) {\r\n      xPos = windowWidth - menuRect.width - 10; // 10px de margen\r\n    }\r\n\r\n    // Ajustar verticalmente si el menú se sale de la ventana\r\n    if (yPos + menuRect.height > windowHeight) {\r\n      yPos = windowHeight - menuRect.height - 10; // 10px de margen\r\n    }\r\n\r\n    // Asegurar que el menú no aparezca fuera de la pantalla por la izquierda o arriba\r\n    xPos = Math.max(10, xPos);\r\n    yPos = Math.max(10, yPos);\r\n\r\n    // Aplicar la posición final\r\n    menu.style.left = `${xPos}px`;\r\n    menu.style.top = `${yPos}px`;\r\n  }\r\n  showColorPicker(padId) {\r\n    const overlay = document.createElement(\"div\");\r\n    overlay.className = \"modal-overlay\";\r\n\r\n    const modal = document.createElement(\"div\");\r\n    modal.className = \"color-picker-modal\";\r\n\r\n    const colorPicker = document.createElement(\"input\");\r\n    colorPicker.type = \"color\";\r\n    colorPicker.value = this.pads.get(padId).color;\r\n\r\n    const applyButton = document.createElement(\"button\");\r\n    const resetButton = document.createElement(\"button\");\r\n    applyButton.textContent = \"Aplicar\";\r\n    applyButton.onclick = () => {\r\n      this.setPadColor(padId, colorPicker.value);\r\n      overlay.remove();\r\n    };\r\n\r\n    resetButton.textContent = \"Reiniciar\";\r\n    resetButton.onclick = () => {\r\n      this.setPadColor(padId, \"#333\");\r\n      overlay.remove();\r\n    };\r\n\r\n    modal.appendChild(colorPicker);\r\n    modal.appendChild(applyButton);\r\n    modal.appendChild(resetButton);\r\n    overlay.appendChild(modal);\r\n    document.body.appendChild(overlay);\r\n  }\r\n\r\n  async setupMIDI() {\r\n    try {\r\n      if (navigator.requestMIDIAccess) {\r\n        const midiAccess = await navigator.requestMIDIAccess();\r\n        document.getElementById(\"connectMIDI\").addEventListener(\"click\", () => {\r\n          this.connectToLaunchpad(midiAccess);\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(\"Error al acceder a MIDI:\", error);\r\n      document.getElementById(\"midiStatus\").textContent =\r\n        \"Error: MIDI no soportado\";\r\n    }\r\n  }\r\n\r\n  connectToLaunchpad(midiAccess) {\r\n    for (const input of midiAccess.inputs.values()) {\r\n      if (input.name.includes(\"Launchpad\")) {\r\n        this.midiInput = input;\r\n        this.midiInput.onmidimessage = (message) =>\r\n          this.handleMIDIMessage(message);\r\n        document.getElementById(\"midiStatus\").textContent =\r\n          \"Estado MIDI: Conectado a \" + input.name;\r\n        break;\r\n      }\r\n    }\r\n\r\n    for (const output of midiAccess.outputs.values()) {\r\n      if (output.name.includes(\"Launchpad\")) {\r\n        this.midiOutput = output;\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  handleMIDIMessage(message) {\r\n    const [status, note, velocity] = message.data;\r\n\r\n    if (status === 144) {\r\n      // Note On\r\n      const row = Math.floor(note / 16);\r\n      const col = note % 16;\r\n      const padId = `${row}-${col}`;\r\n\r\n      if (this.pads.has(padId)) {\r\n        this.triggerPad(padId);\r\n      }\r\n    }\r\n  }\r\n\r\n  setupEventListeners() {\r\n    document.addEventListener(\"keydown\", (e) => {\r\n      if (e.code === \"Space\") {\r\n        e.preventDefault();\r\n        this.stopAllAudio();\r\n      }\r\n\r\n      const padId = this.keyToPadMap[e.key.toLocaleLowerCase()];\r\n      if (padId) {\r\n        e.preventDefault();\r\n        this.triggerPad(padId);\r\n      }\r\n    });\r\n  }\r\n\r\n  handlePadClick(padId) {\r\n    this.selectedPad = padId;\r\n    this.triggerPad(padId);\r\n  }\r\n\r\n  triggerPad(padId) {\r\n    const pad = this.pads.get(padId);\r\n\r\n    if (pad.audioBuffer) {\r\n      if (pad.isPlaying) {\r\n        this.stopAudio(padId);\r\n      } else {\r\n        this.playAudio(padId);\r\n      }\r\n    }\r\n\r\n    const originalColor = pad.color;\r\n    pad.element.style.backgroundColor = \"#fff\";\r\n    setTimeout(() => {\r\n      pad.element.style.backgroundColor = originalColor;\r\n    }, 100);\r\n  }\r\n\r\n  removeAudio(padId) {\r\n    const pad = this.pads.get(padId);\r\n\r\n    // Detener el audio si está sonando\r\n    if (pad.isPlaying) {\r\n      this.stopAudio(padId);\r\n    }\r\n\r\n    // Limpiar el buffer y resetear el estado\r\n    pad.audioBuffer = null;\r\n    pad.element.style.border = \"2px solid #333\";\r\n    pad.statusIcon.textContent = \"\";\r\n  }\r\n\r\n  removeImage(padId) {\r\n    const padElement = document.getElementById(padId);\r\n    const pad = this.pads.get(padId);\r\n\r\n    // Remove the image element\r\n    const imageElement = padElement.querySelector(\"img.pad-image\");\r\n    if (imageElement) {\r\n      // Revoke the object URL to free up memory\r\n      if (pad.imageBuffer) {\r\n        URL.revokeObjectURL(pad.imageBuffer);\r\n      }\r\n\r\n      imageElement.remove();\r\n\r\n      // Reset pad state\r\n      pad.hasImage = false;\r\n      pad.imageBuffer = null;\r\n    }\r\n  }\r\n\r\n  async loadAudioFile(padId) {\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.accept = \"audio/*\";\r\n\r\n    input.onchange = async (e) => {\r\n      const file = e.target.files[0];\r\n      const arrayBuffer = await file.arrayBuffer();\r\n      const audioBuffer = await this.audioContext.decodeAudioData(arrayBuffer);\r\n\r\n      const pad = this.pads.get(padId);\r\n      pad.audioBuffer = audioBuffer;\r\n      pad.element.style.border = \"2px solid #4CAF50\";\r\n    };\r\n\r\n    input.click();\r\n  }\r\n\r\n  async loadImageFile(padId) {\r\n    const input = document.createElement(\"input\");\r\n    input.type = \"file\";\r\n    input.accept = \"image/*\";\r\n\r\n    input.onchange = async (event) => {\r\n      const file = event.target.files[0];\r\n\r\n      if (file) {\r\n        const imageUrl = URL.createObjectURL(file);\r\n        const padElement = document.getElementById(padId);\r\n        const pad = this.pads.get(padId);\r\n\r\n        if (padElement) {\r\n          let imageElement = padElement.querySelector(\"img\");\r\n          if (!imageElement) {\r\n            imageElement = document.createElement(\"img\");\r\n            padElement.appendChild(imageElement);\r\n          }\r\n          imageElement.src = imageUrl;\r\n          imageElement.style.width = \"100%\";\r\n          imageElement.style.height = \"100%\";\r\n          imageElement.classList.add(\"pad-image\"); // Add class for easier selection\r\n\r\n          // Update pad state\r\n          pad.hasImage = true;\r\n          pad.imageBuffer = imageUrl;\r\n        }\r\n      }\r\n    };\r\n\r\n    input.click();\r\n  }\r\n\r\n  setPadColor(padId, color) {\r\n    const pad = this.pads.get(padId);\r\n    pad.color = color;\r\n    pad.element.style.backgroundColor = color;\r\n\r\n    if (this.midiOutput) {\r\n      const [row, col] = padId.split(\"-\").map(Number);\r\n      const note = row * 16 + col;\r\n      const [r, g, b] = this.hexToRgb(color);\r\n      const velocity = Math.floor((((r + g + b) / 3) * 127) / 255);\r\n      this.midiOutput.send([144, note, velocity]);\r\n    }\r\n  }\r\n\r\n  hexToRgb(hex) {\r\n    const result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n    return result\r\n      ? [\r\n          parseInt(result[1], 16),\r\n          parseInt(result[2], 16),\r\n          parseInt(result[3], 16),\r\n        ]\r\n      : [0, 0, 0];\r\n  }\r\n\r\n  playAudio(padId) {\r\n    const pad = this.pads.get(padId);\r\n    if (pad.isPlaying) {\r\n      this.stopAudio(padId);\r\n    }\r\n\r\n    const source = this.audioContext.createBufferSource();\r\n    source.buffer = pad.audioBuffer;\r\n    source.connect(this.audioContext.destination);\r\n    source.start();\r\n\r\n    pad.isPlaying = true;\r\n    pad.statusIcon.textContent = \"⏸\";\r\n\r\n    source.onended = () => {\r\n      pad.isPlaying = false;\r\n      pad.statusIcon.textContent = \"\";\r\n      this.activeAudioSources.delete(padId);\r\n    };\r\n\r\n    this.activeAudioSources.set(padId, source);\r\n  }\r\n\r\n  stopAudio(padId) {\r\n    const source = this.activeAudioSources.get(padId);\r\n    const pad = this.pads.get(padId);\r\n\r\n    if (source) {\r\n      source.stop();\r\n      this.activeAudioSources.delete(padId);\r\n    }\r\n\r\n    pad.isPlaying = false;\r\n    pad.statusIcon.textContent = \"⏸\";\r\n  }\r\n\r\n  stopAllAudio() {\r\n    for (const [padId] of this.activeAudioSources) {\r\n      this.stopAudio(padId);\r\n    }\r\n  }\r\n}\r\n\r\nwindow.addEventListener(\"DOMContentLoaded\", () => {\r\n  new LaunchpadEmulator();\r\n});\r\n\r\n// Animación en espiral\r\nfunction spiralAnimation() {\r\n  const gridSize = 8; // Tamaño de la cuadrícula\r\n  const animationColor = \"#4caf50\"; // Color para la animación\r\n  const originalColor = \"#333\"; // Color original\r\n  const delay = 100; // Tiempo en ms entre cambios de cada pad\r\n  let spiralOrder = [];\r\n\r\n  // Calcular el orden en espiral de los pads\r\n  let left = 0,\r\n    right = gridSize - 1,\r\n    top = 0,\r\n    bottom = gridSize - 1;\r\n  while (left <= right && top <= bottom) {\r\n    for (let i = left; i <= right; i++) spiralOrder.push(`${top}-${i}`);\r\n    top++;\r\n    for (let i = top; i <= bottom; i++) spiralOrder.push(`${i}-${right}`);\r\n    right--;\r\n    for (let i = right; i >= left; i--) spiralOrder.push(`${bottom}-${i}`);\r\n    bottom--;\r\n    for (let i = bottom; i >= top; i--) spiralOrder.push(`${i}-${left}`);\r\n    left++;\r\n  }\r\n\r\n  // Aplicar la animación en espiral\r\n  spiralOrder.forEach((padId, index) => {\r\n    setTimeout(() => {\r\n      const pad = document.getElementById(padId);\r\n      if (pad) {\r\n        pad.style.backgroundColor = animationColor;\r\n        setTimeout(() => {\r\n          pad.style.backgroundColor = originalColor;\r\n        }, delay * 2); // Apagar después de un tiempo\r\n      }\r\n    }, index * delay);\r\n  });\r\n}\r\n\r\n// Llamar a la animación al cargar la página\r\nwindow.onload = function () {\r\n  spiralAnimation();\r\n};\r\n"],"names":["LaunchpadEmulator","constructor","midiInput","midiOutput","pads","Map","selectedPad","audioContext","window","AudioContext","webkitAudioContext","activeAudioSources","keyToPadMap","q","w","e","r","t","y","u","i","a","s","d","f","g","h","j","k","z","x","c","v","b","n","m","init","createGrid","setupEventListeners","setupMIDI","setupContextMenu","grid","document","getElementById","row","col","pad","createElement","className","id","style","backgroundColor","statusIcon","appendChild","padId","set","element","color","audioBuffer","isPlaying","imageBuffer","hasImage","addEventListener","handlePadClick","showContextMenu","preventDefault","menu","querySelector","remove","event","existingMenu","get","items","text","action","loadAudioFile","showColorPicker","loadImageFile","soundInfo","unshift","name","push","removeAudio","removeImage","forEach","item","menuItem","textContent","onclick","body","menuRect","getBoundingClientRect","windowWidth","innerWidth","windowHeight","innerHeight","xPos","clientX","yPos","clientY","width","height","Math","max","left","top","overlay","modal","colorPicker","type","value","applyButton","resetButton","setPadColor","navigator","requestMIDIAccess","midiAccess","connectToLaunchpad","error","console","input","inputs","values","includes","onmidimessage","message","handleMIDIMessage","output","outputs","status","note","velocity","data","floor","has","triggerPad","code","stopAllAudio","key","toLocaleLowerCase","stopAudio","playAudio","originalColor","setTimeout","border","padElement","imageElement","URL","revokeObjectURL","accept","onchange","file","target","files","arrayBuffer","decodeAudioData","click","imageUrl","createObjectURL","src","classList","add","split","map","Number","hexToRgb","send","hex","result","exec","parseInt","source","createBufferSource","buffer","connect","destination","start","onended","delete","stop","onload","spiralAnimation","spiralOrder","right","gridSize","bottom","index","delay"],"version":3,"file":"index.4e2cce8a.js.map"}